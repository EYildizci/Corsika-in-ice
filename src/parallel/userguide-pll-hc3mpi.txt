  
    @@@@@                                 @     @                 
   @     @                                      @                 
   @           @@@     @  @@     @@@@     @     @   @     @@@@    
   @          @   @    @ @      @         @     @  @     @   @    
   @          @   @    @@       @@@@@     @     @ @      @   @    
   @     @    @   @    @            @     @     @@ @     @   @    
    @@@@@      @@@     @        @@@@      @     @   @     @@@@ 
  
                                              @      @                @  
                                              @      @                @  
         @@@@      @@@@    @  @@     @@@@     @      @       @@@      @  
         @   @    @   @    @ @      @   @     @      @      @   @     @  
         @   @    @   @    @@       @   @     @      @      @@@@@     @  
         @@@@     @   @    @        @   @     @      @      @         @  
         @         @@@@    @         @@@@     @@     @@      @@@      @@ 

 *************************************************************************
 *               _    _    _____   ____                                  *
 *              | |  | |  / ____| |___ \                                 *
 *              | |__| | | |        __) |                                *
 *              |  __  | | |       |__ <                                 *
 *              | |  | | | |____   ___) |       userguide hc3mpi         *
 *              |_|  |_|  \_____| |____/                                 *
 *                                                                       *
 *          Author: juergen.oehlschlaeger@kit.edu    25 Jun. 2013        *
 *************************************************************************

 Instruction, how to run parallel CORSIKA on the HP XC3000 at the KIT
 with parallelization by the MPI system (MPI version of December 2012):

 path: corsika.trunk/ (i.e. main path of a corsika distribution)

 (1)  first reset all environment optimization flags (see command env) by  
      typing `. src/parallel/unsetoptflags.sh` to avoid highest compiler
      optimization of MPI system in the parallel CORSIKA executable; then 
      run ./coconut to create a CORSIKA executable with parallelization by
      the MPI system by selecting `p - PARALLEL treatment of subshowers`
      and then `2 - Library to be used with MPI system`; i.e. it exists
      `mpi_corsika73700Linux_QGSII_gheisha_runner` in subdirectory run/.

 path: $WORK (i.e. /work/ws/joe/) or corsika.trunk/run/

 (2)  rename this executable to `mpi_corsika73567_stnd_QGSII4_gheisha_runner`
      to distinguish standard and thinning simulations, and other possible
      options like history or stackinput or others.

 (3)  prepare corsika steering file `parallel-001234` for parallel running
      containing the keyword PARALLEL by using the fortran utility program
      `acreinphc3.f`, i.e. `./acreinphc3` (or `./acc`), or modify a copy
      of an existing one for new purposes; example see appendix (A-3).

 (4)  prepare the submit script `jobhc3-001234` with the organization of
      the (new) subdirectory csk001234/, by using the fortran utility
      program `acreinphc3.f`, i.e. `./acreinphc3` (or `./acc`), or modify
      a copy of an existing one for the new run number; the last command
      must be the complete submit commmand to the hc3 job queueing system,
      i.e. type `./jobhc3-001234` (example see appendix (A-4));
      if you have just created then the new subdirectory csk001234/ you
      may submit directly the simulation by:
      job_submit -cp -p16 -t60 -m1100 mpirun \
             mpi_corsika72495Linux_QGSJET_gheisha_runner parallel-001234

 (5)  after the successful parallel corsika simulation the subdirectory 
      csk001234/ must contain the file time.txt of about 90 bytes; then
      switch to this subdirectory csk001234/ and run script ./postprocess.sh
      which prints infos to `Job001234_*.[err,out]` and to `time.txt`; then
      make sure that the last line of `Job001234_*.out` contains the total
      amount of Gigabytes like `          5.967316 GBy` and the next to last
      line has to contain `EXIT`; see appendix (A-5);

 (6)  then execute script `sumprocessing.sh` with argument 1234 (run number)
      to create three run number dependent scripts `sumlistnkginfo.sh001234`,
      `sumlongifiles.sh001234`, and `showanalyhc3.sh001234` for further 
      analyses; in the beginning of each script the corresponding submit
      command is printed as comment; 
             job_submit -p1 -cp -t660 -m1000 showanalyhc3.sh001234 
      see appendix (A-6).

 path: $WORK

 (7)  then go back to the working directory and run `timeinfofiles.sh`
      (no arguments necessary) which adds the corresponding corsika path
      to each file `time.txt` - if not yet done as 7th line - to make the
      name unique over all subdirectories, i.e. csk00iiii/time.txt00iiii.   
  
**************************************************************************

 (A-3) parallel steering file
 ============================

 See also CORSIKA user`s guide. 

RUNNR       1234
PARALLEL   3000.   3000000.  1  F
NSHOW          1
EVTNR          1
SEED        2160         0         0
SEED        2161         0         0
SEED        2162         0         0
SEED        2163         0         0
SEED        2164         0         0
SEED        2165         0         0
PRMPAR        14
ERANGE   3.8283E+09   3.8283E+09
THETAP       23.45       23.45
PHIP         26.56       26.56
OBSLEV   1452.e2        870.000 g/cm^2
MAGNET     19.71        -14.18     Auger
MAXPRT         1
ECTMAP     1.E11
ECUTS       0.1000   0.1000   2.5e-4   2.5e-4
RADNKG    200.E2
HADFLG    0    0    0    0    0    2
ELMFLG         T         T
QGSJET         T         0
QGSSIG         T
MUADDI         T
MUMULT         T
STEPFC        1.
HILOW        80.  
DIRECT csk001234/ 
HOST   hc3.uni
USER   you
EXIT

 steering file creation commands
 ===============================

 #!/bin/bash
 # - - - - compile and link fortran program
   ifort -C acreinphc3.f -o acreinphc3
 # - - - - execute fortran program
   ./acreinphc3
 # - - - - make jobhc3 files executable
   chmod +x jobhc3*

**************************************************************************

 (A-4) job submit script
 =======================

 #!/bin/bash
 # 
 if [ ! -e csk001234/ ] ; then
    /bin/mkdir csk001234/
 else
    /bin/rm -f csk001234/*
 fi
 /bin/cp jobhc3-001234 csk001234/
 /bin/cp parallel-001234 csk001234/
 /bin/cp sum* csk001234/
 /bin/cp totaltime* csk001234/
 /bin/cp postprocess.sh csk001234/
 /bin/cp readcsk2* csk001234/
 /bin/cp showanalyhc3* csk001234/
 #
 job_submit -cp -p200 -t330 -m2000 -oJob001234_%j.out -eJob001234_%j.err \
     mpirun mpi_corsika73567_stnd_QGSII4_gheisha_runner parallel-001234
 #

 Remark:
 General submit syntax of a parallel job is 
   [job_submitter]  [mpi_executable]  [input_file_name]  [debug_switch] ;
 when the debug switch as `T` is used as additional argument of `mpirun`
 a detailed protocol about all steps done by MPI-Runner will be saved in
 the file `mpirunprotocol.txt` in the resulting subdirectory.

**************************************************************************

 (A-5) time statistic file (7 lines, after timeinfofiles.sh) 
 ===========================================================

     START TIME          STOP TIME       TIME (min)
 1359112626.006491   1359114041.460160    23.590894
 LONGEST JOB: MPIID = 17 and Time =  707.726820
  Total number of jobs =  207
 Maximum size of group =   17
 TOTAL CPU TIME (days) =    0.438553
 csk000093/time.txt

 *************************************************************************

 (A-6) analysis scripts
 ======================

 #!/bin/bash
 # 
 # = = = = = job_submit -p1 -cp -t30 -m1000 sumlistnkginfo.sh001234
 # 
 # sum up all NKG averages of `.lst` files:
 # --------------------------------------------------------------------
   ls -1 DAT001234-*.lst > sumlistnkginfo.i001234
   ./sumlistnkginfo < sumlistnkginfo.i001234 > sumlistnkginfo.out001234

 #!/bin/bash
 # 
 # = = = = = job_submit -p1 -cp -t30 -m1000 sumlongifiles.sh001234
 # 
 # sum up all `.long` files:
 # -----------------------------------------------------------------
   ls -1 DAT001234-*.long > sumlongifiles.i001234
   ./sumlongifiles < sumlongifiles.i001234 > sumlongifiles.out001234

 #!/bin/bash
 #
 # = = = = = job_submit -p1 -cp -t660 -m1000 showanalyhc3.sh001234
 # 
 # create file list and run `showanalyhc3` program:
 # ---------------------------------------------------------------
 # 
   ls -1 DAT001234* | grep t -v | grep n -v > showanalyhc3.i001234
 # 
 # names of sub paths csk00????;
 # gfortran -fbounds-check showanalyhc3.f -o showanalyhc3
 # f77 -fbounds-check -m32 showanalyhc3.f -o showanalyhc3
 # ifort -C showanalyhc3.f -o showanalyhc3
 #
   ./showanalyhc3 < showanalyhc3.i001234 > showanalyhc3.out001234
   mv fort.9 showanalyhc3.fort001234

 *************************************************************************

